Evolutionary computing is a type of optimization technique that is inspired by the process of natural evolution and can be used to find solutions to a wide range of problems. There are several evolutionary computing algorithms that you can use in Python, such as genetic algorithms, evolutionary strategies, and differential evolution.

To use evolutionary computing to solve the iris classification problem, you can represent the features of each iris plant (sepal length, sepal width, petal length, and petal width) as a set of parameters in a mathematical model, 
and then use an evolutionary algorithm to find the set of parameters that best separates the plants into the two species (Iris-setosa and Iris-versicolor).

Here is an outline of how you could approach this task using a genetic algorithm in Python:

Initialize a population of candidate solutions (parameter sets) randomly.
Evaluate the fitness of each solution by using it to predict the species of the iris plants in the training set, and calculating a performance metric such as accuracy or precision.
Select the fittest solutions to serve as parents for the next generation.
Create the next generation of solutions by applying genetic operators such as crossover (combining the parameters of the parents) and mutation (randomly altering the parameters).
Repeat steps 2-4 for a fixed number of iterations or until a satisfactory solution is found.
You can use libraries such as DEAP or PyGMO to implement a genetic algorithm in Python. You can also find more information about evolutionary computing and how to use it to solve problems in Python in online resources and textbooks on the subject.